#pragma once

#include "native_Assertion.hpp"


#include "jmsf/cule/cule_Allocators.h"
#include "jmsf/pointing/Nonlinked.hin"

#include "jmsf/cule/asserting/deprecating/Assert.hpp"


namespace jmsf {
namespace cule {
namespace asserting {


template< class A_type >
void native_Assertion< A_type >::should_be_equal_to( const A_type &expected_value ) const {
	if ( _actual_value == expected_value ) return;

	const memorying::Womp< texting::Ansii_allocating_assistor > &aaa = cule_Allocators::instance()->get_ansii_allocating_assistor();
	pointing::Shared< texting::Ansii_stream > ansii_stream = aaa->create_ansii_stream();

	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "the actual object of type <" ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( JMSF_TYPE_NAME( A_type ) ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "> is: " ) ) );
	put_text_to_stream_from_native( ansii_stream, _actual_value );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( ", but it was expected to be: " ) ) );
	put_text_to_stream_from_native( ansii_stream, expected_value );

	deprecating::Assert_throw_cule_exception( texting::Aaa_cs( aaa, ansii_stream ), _file_and_line );
}

template< class A_type >
void native_Assertion< A_type >::should_not_be_equal_to( const A_type &undesirable_value ) const {
	if ( _actual_value != undesirable_value ) return;

	const memorying::Womp< texting::Ansii_allocating_assistor > &aaa = cule_Allocators::instance()->get_ansii_allocating_assistor();
	pointing::Shared< texting::Ansii_stream > ansii_stream = aaa->create_ansii_stream();

	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "the actual object of type <" ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( JMSF_TYPE_NAME( A_type ) ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "> is: " ) ) );
	put_text_to_stream_from_native( ansii_stream, _actual_value );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( ", but it was expected to be different" ) ) );

	deprecating::Assert_throw_cule_exception( texting::Aaa_cs( aaa, ansii_stream ), _file_and_line );
}

template< class A_type >
void native_Assertion< A_type >::should_be_empty() const {
	if ( _actual_value.is_empty() ) return;

	const memorying::Womp< texting::Ansii_allocating_assistor > &aaa = cule_Allocators::instance()->get_ansii_allocating_assistor();
	pointing::Shared< texting::Ansii_stream > ansii_stream = aaa->create_ansii_stream();

	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "this object of type <" ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( JMSF_TYPE_NAME( A_type ) ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "> is not empty, but it was expected to be empty" ) ) );

	deprecating::Assert_throw_cule_exception( texting::Aaa_cs( aaa, ansii_stream ), _file_and_line );
}

template< class A_type >
void native_Assertion< A_type >::should_not_be_empty() const {
	if ( _actual_value.is_not_empty() ) return;

	const memorying::Womp< texting::Ansii_allocating_assistor > &aaa = cule_Allocators::instance()->get_ansii_allocating_assistor();
	pointing::Shared< texting::Ansii_stream > ansii_stream = aaa->create_ansii_stream();

	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "this object of type <" ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( JMSF_TYPE_NAME( A_type ) ) ) );
	ansii_stream->put( texting::Aaa_sl( aaa, JMSF_SL( "> is empty, but it was expected not to be empty" ) ) );

	deprecating::Assert_throw_cule_exception( texting::Aaa_cs( aaa, ansii_stream ), _file_and_line );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
template< class A_type >
native_Assertion< A_type >::~native_Assertion() noexcept
{}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//native_Assertion< A_type >::native_Assertion() noexcept
//{}

template< class A_type >
native_Assertion< A_type >::native_Assertion( const A_type &actual_value, const ::jmsf::validating::File_and_line &file_and_line ) noexcept
	:
		_actual_value( actual_value ),
		_file_and_line( file_and_line )
{}

template< class A_type >
// static
native_Assertion< A_type > native_Assertion< A_type >::create( const A_type &actual_value, const ::jmsf::validating::File_and_line &file_and_line ) {
	return native_Assertion( actual_value, file_and_line );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//native_Assertion< A_type >::native_Assertion( const native_Assertion &/*another*/ ) noexcept {
//}

//const native_Assertion &native_Assertion< A_type >::operator =( const native_Assertion &another ) noexcept {
//	if ( &another == this ) return *this;

//	// copy
//	return *this;
//}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//native_Assertion< A_type >::native_Assertion( native_Assertion &&/*another*/ ) noexcept {
//}

//native_Assertion &native_Assertion< A_type >::operator =( native_Assertion &&another ) noexcept {
//	if ( &another == this ) return *this;

//	// move
//	return *this;
//}

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


} // namespace asserting
} // namespace cule
} // namespace jmsf


namespace jmsf {
namespace cule {
namespace asserting {


template<>
inline void native_Assertion< bool >::should_be() const {
	if ( _actual_value ) return;

	deprecating::Assert_throw_cule_exception(
		texting::Aaa_sl( cule_Allocators::instance()->get_ansii_allocating_assistor(), JMSF_SL( "this is bool( false), but it was expected to be bool( true )" ) ),
		_file_and_line );
}

template<>
inline void native_Assertion< bool >::should_not_be() const {
	if ( !_actual_value ) return;

	deprecating::Assert_throw_cule_exception(
		texting::Aaa_sl( cule_Allocators::instance()->get_ansii_allocating_assistor(), JMSF_SL( "this is bool( true ), but it was expected to be bool( false )" ) ),
		_file_and_line );
}


} // namespace asserting
} // namespace cule
} // namespace jmsf


namespace jmsf {
namespace cule {
namespace asserting {


template< class A_type >
native_Assertion< A_type > create_native_assertion( const A_type &actual_value, const ::jmsf::validating::File_and_line &file_and_line ) noexcept {
	return native_Assertion< A_type >::create( actual_value, file_and_line );
}


} // namespace asserting
} // namespace cule
} // namespace jmsf

